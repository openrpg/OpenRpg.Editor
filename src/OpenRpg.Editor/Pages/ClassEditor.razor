@page "/classes"

@using OpenRpg.Core.Classes
@using OpenRpg.Core.Effects
@using OpenRpg.Core.Requirements
@using OpenRpg.Data.Defaults
@using OpenRpg.Editor.Infrastructure.Extensions
@using OpenRpg.Editor.Infrastructure.Pipelines.Typed

@inject IJSRuntime JS
@inject InMemoryDataRepository<DefaultClassTemplate> Repository
@inject ISaveDataPipeline<List<DefaultClassTemplate>> SavePipeline

<div class="columns">
    <div class="column is-one-fifth">
        <ContentSidebar Title="Class Templates" Data="Repository.Data" SelectedItem="CurrentClassTemplate"
                        OnAdd="AddClass" 
                        OnSelected="(selected => SelectClass(selected as DefaultClassTemplate))">
        </ContentSidebar>
    </div>
    <div class="column">
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <BasicDetailsEditor Data="CurrentClassTemplate"></BasicDetailsEditor>
        </div>

        <div class="is-rounded has-background-dark p-lg m-md">
            <LocaleDetails LocaleData="CurrentClassTemplate"></LocaleDetails>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Effects</h4>
            <EffectsEditor Effects="CurrentClassTemplate.Effects" OnUpdate="UpdateEffect"></EffectsEditor>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Requirements</h4>
            <RequirementsEditor Requirements="CurrentClassTemplate.Requirements" OnUpdate="UpdateRequirements"></RequirementsEditor>
        </div>
        
        <div>
            <a class="button is-success" @onclick="SaveChanges">Save</a>
        </div>
        
    </div>
</div>

@functions {
    public DefaultClassTemplate CurrentClassTemplate;

    protected override void OnInitialized()
    {
        if (Repository.Data.Any())
        { CurrentClassTemplate = Repository.Data.First(); }
        else
        {
            CurrentClassTemplate = new DefaultClassTemplate();
            CurrentClassTemplate.Id = 1;
            Repository.Create(CurrentClassTemplate);
        }
    }

    public void AddClass()
    {
        CurrentClassTemplate = new DefaultClassTemplate();
        CurrentClassTemplate.Id = Repository.Data.Count + 1;
        CurrentClassTemplate.Variables.AssetCode($"class-new-{CurrentClassTemplate.Id}");
        Repository.Create(CurrentClassTemplate);
        StateHasChanged();
    }

    public void SelectClass(DefaultClassTemplate classTemplate)
    {
        CurrentClassTemplate = classTemplate;
        StateHasChanged();
    }

    public async void SaveChanges()
    {
        try
        {
            await SavePipeline.Execute(Repository.Data);
            var options = new {message = "Classes saved", type = "is-success", position = "bottom-center"};
            await JS.InvokeAsync<object>("bulmaToast.toast", options);

        }
        catch (Exception e)
        {
            var options = new {message = $"Error Saving: {e.Message}", type = "is-danger", position = "bottom-center"};
            await JS.InvokeAsync<object>("bulmaToast.toast", options);   
        }
    }
    
    public void UpdateEffect(IEnumerable<Effect> updatedEffects)
    {
        CurrentClassTemplate.Effects = updatedEffects;
        StateHasChanged();
    }
    
    public void UpdateRequirements(IEnumerable<Requirement> updatedRequirements)
    {
        CurrentClassTemplate.Requirements = updatedRequirements;
        StateHasChanged();
    }
}
