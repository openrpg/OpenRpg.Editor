@page "/races"
@using System.Linq
@using OpenRpg.Core.Defaults.Conventions
@using OpenRpg.Core.Effects
@using OpenRpg.Core.Requirements
@using OpenRpg.Data
@using OpenRpg.Data.DataManagers
@inject DataStore<ConventionalRaceTemplate> DataStore
@inject IDataStoreManager<ConventionalRaceTemplate> Manager;

<div class="columns">
    <div class="column is-one-fifth">
        <ContentSidebar Title="Race Templates" Data="DataStore.Data" SelectedItem="CurrentRaceTemplate"
                    OnAdd="@AddRace" OnSelected="@((selected) => SelectRace(selected as ConventionalRaceTemplate))">
        </ContentSidebar>
    </div>
    <div class="column">
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <div class="is-rounded has-background-dark p-lg m-md">
                <BasicDetailsEditor Data="CurrentRaceTemplate"></BasicDetailsEditor>
            </div>
        </div>

        <div class="is-rounded has-background-dark p-lg m-md">
            <LocaleDetails LocaleData="CurrentRaceTemplate"></LocaleDetails>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Effects</h4>
            <EffectsEditor Effects="CurrentRaceTemplate.Effects" OnUpdate="@UpdateEffect"></EffectsEditor>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Requirements</h4>
            <RequirementsEditor Requirements="CurrentRaceTemplate.Requirements" OnUpdate="@UpdateRequirements"></RequirementsEditor>
        </div>
        
        <div>
            <a class="button is-success" onclick="@SaveChanges">Save</a>
        </div>
        
    </div>
</div>

@functions {
    public ConventionalRaceTemplate CurrentRaceTemplate;

    protected override void OnInit()
    {
        if (DataStore.Data.Count > 0)
        { CurrentRaceTemplate = DataStore.Data.First(); }
        else
        {
            CurrentRaceTemplate = new ConventionalRaceTemplate();
            CurrentRaceTemplate.Id = 1;
            DataStore.Data.Add(CurrentRaceTemplate);
        }
    }

    public void AddRace()
    {
        CurrentRaceTemplate = new ConventionalRaceTemplate();
        CurrentRaceTemplate.Id = DataStore.Data.Count + 1;
        CurrentRaceTemplate.AssetCode = $"race-new-{CurrentRaceTemplate.Id}";
        DataStore.Data.Add(CurrentRaceTemplate);
        StateHasChanged();
    }

    public void SelectRace(ConventionalRaceTemplate template)
    {
        CurrentRaceTemplate = template;
        StateHasChanged();
    }

    public async void SaveChanges()
    {
        try
        {
            await Manager.SaveData(DataStore);
            var options = new {message = "Races saved", type = "is-success", position = "bottom-center"};
            await JSRuntime.Current.InvokeAsync<object>("bulmaToast.toast", options);

        }
        catch (Exception e)
        {
            var options = new {message = $"Error Saving: {e.Message}", type = "is-danger", position = "bottom-center"};
            await JSRuntime.Current.InvokeAsync<object>("bulmaToast.toast", options);   
        }
    }
    
    public void UpdateEffect(IEnumerable<Effect> updatedEffects)
    {
        CurrentRaceTemplate.Effects = updatedEffects;
        StateHasChanged();
    }
    
    public void UpdateRequirements(IEnumerable<Requirement> updatedRequirements)
    {
        CurrentRaceTemplate.Requirements = updatedRequirements;
        StateHasChanged();
    }
}
