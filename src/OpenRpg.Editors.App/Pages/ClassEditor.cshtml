@page "/classes"
@using System.Linq
@using OpenRpg.Core.Defaults.Conventions
@using OpenRpg.Core.Effects
@using OpenRpg.Core.Requirements
@using OpenRpg.Data
@using OpenRpg.Data.DataManagers
@inject DataStore<ConventionalClassTemplate> DataStore
@inject IDataStoreManager<ConventionalClassTemplate> Manager;

<div class="columns">
    <div class="column is-one-fifth">
        <ContentSidebar Title="Class Templates" Data="DataStore.Data" SelectedItem="CurrentClassTemplate"
            OnAdd="@AddClass" OnSelected="@((selected) => SelectClass(selected as ConventionalClassTemplate))">
        </ContentSidebar>
    </div>
    <div class="column">
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <BasicDetailsEditor Data="CurrentClassTemplate"></BasicDetailsEditor>
        </div>

        <div class="is-rounded has-background-dark p-lg m-md">
            <LocaleDetails LocaleData="CurrentClassTemplate"></LocaleDetails>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Effects</h4>
            <EffectsEditor Effects="CurrentClassTemplate.Effects" OnUpdate="@UpdateEffect"></EffectsEditor>
        </div>
        
        <div class="is-rounded has-background-dark p-lg m-md">
            <h4 class="title is-4">Requirements</h4>
            <RequirementsEditor Requirements="CurrentClassTemplate.Requirements" OnUpdate="@UpdateRequirements"></RequirementsEditor>
        </div>
        
        <div>
            <a class="button is-success" onclick="@SaveChanges">Save</a>
        </div>
        
    </div>
</div>

@functions {
    public ConventionalClassTemplate CurrentClassTemplate;

    protected override void OnInit()
    {
        if (DataStore.Data.Count > 0)
        { CurrentClassTemplate = DataStore.Data.First(); }
        else
        {
            CurrentClassTemplate = new ConventionalClassTemplate();
            CurrentClassTemplate.Id = 1;
            DataStore.Data.Add(CurrentClassTemplate);
        }
    }

    public void AddClass()
    {
        CurrentClassTemplate = new ConventionalClassTemplate();
        CurrentClassTemplate.Id = DataStore.Data.Count + 1;
        CurrentClassTemplate.AssetCode = $"class-new-{CurrentClassTemplate.Id}";
        DataStore.Data.Add(CurrentClassTemplate);
        StateHasChanged();
    }

    public void SelectClass(ConventionalClassTemplate classTemplate)
    {
        CurrentClassTemplate = classTemplate;
        StateHasChanged();
    }

    public async void SaveChanges()
    {
        try
        {
            await Manager.SaveData(DataStore);
            var options = new {message = "Classes saved", type = "is-success", position = "bottom-center"};
            await JSRuntime.Current.InvokeAsync<object>("bulmaToast.toast", options);

        }
        catch (Exception e)
        {
            var options = new {message = $"Error Saving: {e.Message}", type = "is-danger", position = "bottom-center"};
            await JSRuntime.Current.InvokeAsync<object>("bulmaToast.toast", options);   
        }
    }
    
    public void UpdateEffect(IEnumerable<Effect> updatedEffects)
    {
        CurrentClassTemplate.Effects = updatedEffects;
        StateHasChanged();
    }
    
    public void UpdateRequirements(IEnumerable<Requirement> updatedRequirements)
    {
        CurrentClassTemplate.Requirements = updatedRequirements;
        StateHasChanged();
    }
}
