@using System.Reflection
@using Microsoft.AspNetCore.Blazor.Components
@using OpenRpg.Core.Common

<h4 class="title is-4">Basic Details</h4>

@if (AvatarContent != null)
{
    <div class="field is-horizontal">
        @AvatarContent
    </div>
}

<div class="field is-horizontal">
    <div class="field-label">
        <label class="label has-text-light">Id</label>
    </div>
    <div class="field-body">
        <div class="field">
            <div class="control">
                <input class="input" type="text" value="@Data.Id" 
                       disabled="@true" readonly="@true" />
            </div>
        </div>
    </div>
</div>
@if (Data is IHasAssetCode AssetContainer)
{
    <div class="field is-horizontal">
        <div class="field-label">
            <label class="label has-text-light">Asset Code</label>
        </div>
        <div class="field-body">
            <div class="field">
                <div class="control">
                    <input class="input" type="text" placeholder="i.e my-asset-code" 
                           value="@AssetContainer.AssetCode" onchange="@((UIChangeEventArgs e) => SetAssetCode(e.Value.ToString()))" />
                </div>
            </div>
        </div>
    </div>
}
@if (AdditionalContent != null)
{
    @AdditionalContent
}

@functions {
    [Parameter]
    IHasDataId Data { get; set; }

    [Parameter] RenderFragment AvatarContent { get; set; }
    [Parameter] RenderFragment AdditionalContent { get; set; }

    private MethodInfo AssetCodeSetter;
    private void SetAssetCode(string assetCode) => AssetCodeSetter.Invoke(Data, new []{assetCode});
    
    protected override void OnParametersSet()
    {
        var dataType = Data.GetType();

        if (Data is IHasAssetCode AssetContainer)
        {
            var assetCodeProperty = dataType.GetProperty("AssetCode");
            AssetCodeSetter = assetCodeProperty.GetSetMethod();
        }
    }
}